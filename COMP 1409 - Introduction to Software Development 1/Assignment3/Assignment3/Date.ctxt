#BlueJ class context
comment0.target=Date
comment0.text=\n\ Represents\ a\ year,\ month,\ day\ triplet.\n\ \n\ @author\ James\ Pede\n\ @version\ Jun20'14,1344h\n
comment1.params=
comment1.target=Date()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Date\n
comment10.params=day
comment10.target=void\ setDay(int)
comment10.text=\n\ Mutator.\n\ @param\ day\ a\ whole\ number\ ranging\ between\ 1\ and\ getNumberOfDaysInThisMonth()\n
comment11.params=
comment11.target=boolean\ isLeapYear()
comment11.text=\n\ Judging\ solely\ from\ the\ year\ attribute,\n\ leaps\ (29\ days\ in\ February,\ as\ opposed\ to\ the\ usual\ 28)\ occur\n\ on\ year\ numbers\ evenly\ divisible\ by\ 4,\ with\ some\ exceptions.\n\ @return\ true,\ only\ if\ the\ year\ number\ meets\ the\ criteria\n
comment12.params=
comment12.target=java.lang.String\ getDayOfTheWeek()
comment12.text=\n\ Working\ only\ from\ the\ data\ in\ the\ attributes,\ a\ day,\ month,\ and\ year\n\ is\ interpreted\ into\ one\ of\ the\ seven\ days\ of\ the\ week.\n\ Assumption\:\ this.year\ shouldn't\ be\ lower\ than\ ERA1\ or\ higher\ than\ ERA6's\ top\ end.\n\ \ \ \ The\ assumption\ isn't\ actually\ valid,\ when\ MIN_YEAR\ \=\ 0,\ but\ hey,\ we'll\ roll\ with\ it.\n\ @return\ a\ weekday\ literal,\ e.g.\ "Saturday"\n
comment13.params=
comment13.target=int\ getNumberOfDaysInThisMonth()
comment13.text=\n\ The\ number\ of\ days\ in\ a\ month\ is\ dependent\ entirely\ on\ what\ the\ month\ is.\n\ The\ sole\ exception\ to\ this\ rule\ is\ FEBRUARY,\ whose\ count\ goes\ +1\ on\ leap\ years.\n\ @return\ some\ number\ between\ 28\ and\ 31;\ used\ as\ an\ upper\ bound\ on\ this.day\n
comment14.params=numeral\ digitCount
comment14.target=java.lang.String\ getPaddedNumeral(int,\ short)
comment14.text=\n\ This\ helper\ function\ provides\ code\ that\ is\ common\ to\ getPaddedMonth()\ and\ getPaddedDay().\n\ A\ padded\ number\ is\ the\ String\ expression\ of\ that\ number.\ \ The\ length\ of\ the\ String\n\ is\ forced\ to\ a\ specified\ number\ of\ digits,\ by\ prepending\ zeroes.\n\ @param\ numeral\ \ \ \ \ \ \ the\ number\ that\ is\ being\ padded\ and\ converted\ into\ a\ String\n\ @param\ digitCount\ \ \ \ the\ intended\ length\ of\ the\ returned\ String;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Note\ that\ digitCount\ is\ not\ validated.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ It\ is\ possible\ to\ specify\ numeral\=10\ and\ digitCount\=1,\ for\ example.\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ a\ literal\ expression\ of\ a\ number,\ padded\ to\ digitCount\ digits\n
comment15.params=
comment15.target=java.lang.String\ getPaddedMonth()
comment15.text=\n\ Prepend\ as\ many\ zeroes\ as\ are\ necessary\ to\ produce\ a\ MM\ String.\n\ @return\ said\ MM\ String\n
comment16.params=
comment16.target=java.lang.String\ getPaddedDay()
comment16.text=\n\ Prepend\ as\ many\ zeroes\ as\ are\ necessary\ to\ produce\ a\ DD\ String.\n\ @return\ said\ DD\ String\n
comment17.params=
comment17.target=java.lang.String\ getFormattedDate()
comment17.text=\n\ Translate\ attribute\ information\ into\ a\ YYYY-MM-DD\ date-String.\n\ @return\ year-padded(month)-padded(day)\n
comment18.params=monthNumber
comment18.target=java.lang.String\ getMonthName(int)
comment18.text=\n\ Convert\ a\ month\ index,\ such\ as\ 7,\ into\ the\ corresponding\ month\ word,\ such\ as\ "August".\n\ @param\ monthNumber\ \ \ a\ month\ index;\ validated\ to\ the\ range\ JANUARY\ to\ DECEMBER\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ a\ literal\ containing\ the\ name\ of\ a\ month\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ OR\ null,\ when\ validation\ fails\n
comment19.params=monthName
comment19.target=int\ getMonthNumber(java.lang.String)
comment19.text=\n\ Convert\ a\ month\ word,\ such\ as\ "September",\ into\ the\ corresponding\ month\ index,\ such\ as\ 9.\n\ @param\ monthName\ \ \ \ \ a\ literal\ containing\ the\ name\ of\ a\ month;\ matched\ case-insensitive\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ a\ month\ index\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ OR\ the\ 'error\ index'\ (UNKNOWN_MONTH),\ when\ no\ match\n
comment2.params=year\ month\ day
comment2.target=Date(int,\ int,\ int)
comment2.text=\n\ Non-default\ constructor.\ \ Institutes\ a\ starting\ Y-M-D\ combination.\n\ @param\ year\ measured\ in\ the\ Gregorian\ Calendar,\ or\ Common\ Era,\ and\ validated\ to\ a\ min\ and\ max\n\ @param\ month\ a\ whole\ number\ ranging\ between\ (the\ constants)\ JANUARY\ and\ DECEMBER\n\ @param\ day\ ranges\ between\ 1\ and\ a\ varying\ monthly\ max;\ validated\ by\ getNumberOfDaysInThisMonth()\n
comment3.params=year\ month\ day
comment3.target=void\ set(int,\ int,\ int)
comment3.text=\n\ Due\ to\ the\ fact\ that\ a\ day's\ validity\ hinges\ on\ both\ the\ month\ and\ year,\n\ this\ common\ mutator\ was\ developed\ for\ all\ three\ attributes.\n\ You\ will\ find\ that\ each\ of\ the\ individual\ mutators\ just\ defer\ to\ this\ one,\n\ often\ by\ treating\ old,\ unchanged\ data\ as\ new\ data.\n\ \n\ @param\ year\ measured\ in\ the\ Gregorian\ Calendar,\ or\ Common\ Era,\ and\ validated\ to\ a\ min\ and\ max\n\ @param\ month\ a\ whole\ number\ ranging\ between\ (the\ constants)\ JANUARY\ and\ DECEMBER\n\ @param\ day\ ranges\ between\ 1\ and\ a\ varying\ monthly\ max;\ validated\ by\ getNumberOfDaysInThisMonth()\n
comment4.params=
comment4.target=void\ setDefaults()
comment4.text=\n\ This\ is\ a\ common\ consequence\ of\ the\ default\ constructor\n\ OR\ a\ set()\ operation\ that\ was\ given\ an\ invalid\ combination\ of\ year,\ month,\ day.\n
comment5.params=
comment5.target=int\ getYear()
comment5.text=\n\ Accessor.\n\ @return\ year\ attribute\n
comment6.params=
comment6.target=int\ getMonth()
comment6.text=\n\ Accessor.\n\ @return\ month\ attribute\n
comment7.params=
comment7.target=int\ getDay()
comment7.text=\n\ Accessor.\n\ @return\ day\ attribute\n
comment8.params=year
comment8.target=void\ setYear(int)
comment8.text=\n\ Mutator.\n\ @param\ year\ a\ whole\ number\ representing\ a\ span\ of\ ~365\ days\ in\ the\ Gregorian\ Calendar\n
comment9.params=month
comment9.target=void\ setMonth(int)
comment9.text=\n\ Mutator.\n\ @param\ month\ a\ whole\ number\ ranging\ between\ JANUARY\ and\ DECEMBER,\ inclusive\n
numComments=20
