#BlueJ class context
comment0.target=JavadocTest
comment0.text=\n\ Hello,\ students\!\n\ \n\ If\ you're\ seeing\ this\ message,\ you've\ double-clicked\ into\ the\ code-view\n\ of\ this\ testing\ module.\ \ You\ sohuld\ find\ that\ when\ it\ is\ compiled,\n\ the\ BlueJ\ 'Integrated\ Development\ Environment'\ turns\ JavadocTest\n\ into\ a\ green\ box.\ \ When\ the\ green-box\ is\ right-clicked\ for\ contextual\ options,\n\ "Test\ All"\ is\ one\ such\ option\ presented\ to\ you.\ \ Choose\ that\ to\ have\n\ the\ javadocumentation\ in\ your\ code\ evaluated.\n\ \n\ This\ evaluation\ that\ you\ will\ receive\ is\ delivered\ via\ the\ 'JUnit'\n\ pass-or-fail\ system.\ \ It\ should\ produce\ a\ pop-up\ window\ with\ the\ name\n\ of\ the\ evaluation\ method\ ("evaluateFilesInThisFolder"),\ preceded\ by\n\ a\ green\ checkmark,\ a\ red\ X,\ or\ a\ grey\ X.\ \ An\ X\ result\ should\ be\ expected\n\ while\ you\ are\ learning.\ \ The\ conditions\ for\ success\ are\ quite\ demanding.\n\ \n\ In\ fact,\ when\ you\ use\ this\ module\ --\ this\ one\ specifically\ --\ you\ are\n\ welcome\ to\ view\ the\ results\ with\ mistrust.\ \ JavadocTest\ was\ not\ meant\n\ as\ an\ ultimate\ authority\:\ Your\ final\ grade\ may\ be\ affected\ by\ the\n\ deductions\ this\ module\ suggests,\ but\ the\ only\ true\ evaluators\ are\ your\n\ instructor\ or\ Teaching\ Assistant.\ \ The\ tool\ itself\ is\ intentionally\n\ flawed;\ it\ performs\ some\ language\ processing,\ which\ is\ not\ an\ area\n\ that\ computers\ currently\ excel\ at.\n\ \n\ You\ may\ find\ that\ you\ can\ deceive\ the\ tool\ by\ adopting\ unexpected\n\ programming\ styles,\ and\ there\ will\ be\ other\ times\ where\ the\ tool\ fails,\n\ but\ the\ reason\ will\ not\ be\ apparent.\ \ It\ is\ your\ marker's\ responsibility\n\ to\ review\ all\ of\ your\ code\ for\ mistakes,\ just\ as\ this\ is\ also\ your\n\ responsibility.\ \ If\ you\ can't\ overcome\ a\ problem\ that\ the\ tool\ reports,\n\ send\ e-mail\ to\ your\ T.A.,\ with\ the\ code\ included\ somehow.\ \ Together,\n\ you\ will\ learn\ what\ has\ to\ be\ learned\ to\ produce\ the\ best\ results.\n\ [Just\ don't\ wait\ to\ the\ last\ minute\!\ \:-D]\n\ \n\ If\ you\ feel\ especially\ confident\ in\ your\ understanding\ of\ the\ Java\n\ language,\ read\ ahead\ to\ the\ in-line\ commentary\ in\ this\ module.\n\ An\ effort\ has\ been\ made\ to\ explain\ the\ operation\ of\ the\ JavadocTest\ tool,\n\ including\ some\ assumptions\ that\ may\ not\ be\ true.\n\n\ @author\ \ James\ Pede\ [james_pede@hotmail.com]\n\ @version\ Jul8'15,2139h\ \ \ Scanner.next()\ no\ longer\ crashes\ when\ odd\ character\ sets\ are\ employed.\n
comment1.params=folder\ name
comment1.target=boolean\ accept(java.io.File,\ java.lang.String)
comment1.text=\n\ The\ test\ module\ is,\ itself,\ a\ file\ filter\ --\n\ processing\ only\ those\ files\ in\ the\ folder\ JavadocTest\ occupies\n\ ending\ in\ the\ file\ extension\ ".java".\n\ @param\ folder\ \ \ \ place\ where\ the\ filter-subjects\ are\ being\ found;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ this\ parameter\ is\ ignored\ because\ I\ dictate\ elsewhere\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ that\ the\ location\ will\ always,\ always\ be\ "."\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [the\ 'working\ directory']\n\ @param\ name\ \ \ \ \ \ the\ file\ identifier\ that\ we\ are\ filtering\n\ @return\ \ \ \ \ \ \ \ \ \ true\ if\ and\ only\ if\ {name}\ ends\ with\ ".java"\n
comment2.params=s\ pattern
comment2.target=java.util.Stack\ scanIntoStack(java.util.Scanner,\ java.lang.String)
comment2.text=\n\ Regular\ Expressions\ are\ capable\ of\ returning\ several\ matches,\n\ but\ there's\ this\ multi-step\ process\ that\ doesn't\ produce\ tidy\ results.\n\ I've\ created\ this\ helper\ method\ for\ testJavadoc()\n\ so\ that\ the\ process\ is\ condensed\ and\ reusable.\n\ @param\ s\ \ \ \ \ \ \ \ \ a\ Scanner\ object,\ which\ is\ wrapping\ and\ streaming\ some\ String-based\ source;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ this\ is\ where\ the\ {pattern}\ will\ be\ found\n\ @param\ pattern\ \ \ the\ Regular\ Expression\ matching\ string;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ look\ up\ RegEx\ on\ the\ Internet\ --\ it's\ complicated,\ but\ important\n\ @return\ \ \ \ \ \ \ \ \ \ Stack\ of\ matches;\ it\ was\ most\ convenient\ to\ organize\ first-in-last-out\n
comment3.params=
comment3.target=void\ evaluateFilesInThisFolder()
comment3.text=\n\ This\ beautiful\ monstrosity\ is\ a\ file\ parser\ that\ finds\ methods\n\ and\ compares\ their\ parameters\ to\ preceding\ javadoc.\n\ Students\ will\ be\ advised\ if\ there\ is\ an\ undocumented\ parameter.\n\ In\ the\ case\ of\ even\ one\ mistake,\ the\ preferred\ style\ will\ be\ detailed.\n\ \n\ Since\ this\ technology\ is\ 'in\ the\ neighborhood',\n\ it\ also\ verifies\ that\ class\ headers\ are\ not\ left\ as\ the\ IDE-generated\n\ default,\ and\ that\ return\ values\ are\ also\ documented\ to\ standard.\n\ \n\ Assumptions/Weaknesses\ of\ algorithm\:\n\ -\ Blocks\ are\ begun\ where\ opening\ braces\ come\ at\ the\ end\ of\ a\ line.\n\ \ \ \ \ \ (Could\ be\ false\ if\ a\ student\ begins\ code\ and\ block\ in\ the\ same\ line.\n\ \ \ \ \ \ This\ would\ be\ a\ practice\ that\ we'd\ like\ to\ discourage\ anyway.)\n\ -\ Multiline\ comments\ don't\ end\ a\ line\ with\ an\ opening\ brace.\n\ \ \ \ \ \ (The\ only\ reason\ I\ can\ predict\ this\ happening\ is\ if\n\ \ \ \ \ \ someone\ had\ a\ code\ sample\ in\ javadoc.\ \ Possible.\ \ Unlikely?)\n\ -\ Class\ names\ and\ method\ names\ don't\ have\ numbers\ in\ them.\n
numComments=4
